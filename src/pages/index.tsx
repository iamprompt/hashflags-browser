import type { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import useSWRImmutable from 'swr/immutable'
import { Dialog } from '@headlessui/react'
import dayjs from 'dayjs'
import { fetcher } from '../utils/fetcher'
import type { APIResponse, Hashflag, HashflagResponse } from './api/hashflags'

const Home: NextPage = () => {
  const { data, error } = useSWRImmutable<
    APIResponse<HashflagResponse>,
    APIResponse<unknown>
  >('/api/hashflags', fetcher)

  const [hashflags, setHashflags] = useState<HashflagResponse>({})
  const [selectedHashflag, setSelectedHashflag] = useState<
    (Hashflag & { hashName: string }) | null
  >(null)
  const [isHashflagModalOpen, setHashflagModalOpen] = useState<boolean>(false)

  useEffect(() => {
    if (data) {
      setHashflags(data.data)
    }
  }, [data])

  if (error) return <div>failed to load</div>

  if (!data) return <div>Loading...</div>

  const handleHashflagClick = (selectedName: string) => {
    setSelectedHashflag({
      hashName: selectedName,
      ...hashflags[selectedName],
    })
    setHashflagModalOpen(true)
  }

  return (
    <>
      <Head>
        <title>Hashflags Browser</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1 className="text-center text-4xl">Hashflags Browser</h1>
        <div className="mx-auto flex max-w-screen-xl flex-wrap justify-center">
          {Object.entries(hashflags)
            .sort(([, hashFieldsA], [, hashFieldsB]) => {
              return (
                hashFieldsB.starting_timestamp_ms -
                hashFieldsA.starting_timestamp_ms
              )
            })
            .map(([hashName, hashFields]) => {
              return (
                <div
                  key={hashName}
                  className="m-1 cursor-pointer rounded-md p-3 hover:bg-gray-100/80"
                  onClick={() => handleHashflagClick(hashName)}
                >
                  <img
                    src={hashFields.asset_url}
                    alt={hashName}
                    className="h-14 w-14"
                  />
                </div>
              )
            })}
        </div>
      </main>

      {selectedHashflag && (
        <Dialog
          open={isHashflagModalOpen}
          onClose={() => setHashflagModalOpen(false)}
          className="fixed inset-0 z-50 flex items-center justify-center p-4"
        >
          <Dialog.Overlay className="fixed inset-0 bg-black/75" />

          <div className="relative mx-auto flex w-2/3 max-w-xl flex-col space-y-5 rounded-xl bg-white p-5">
            <Dialog.Title className="break-words text-center text-xl font-bold">
              {selectedHashflag.hashName}
            </Dialog.Title>
            <div className="text-center">
              {dayjs(selectedHashflag.starting_timestamp_ms).format(
                'DD MMMM YYYY HH:mm:ss A'
              )}{' '}
              -{' '}
              {dayjs(selectedHashflag.ending_timestamp_ms).format(
                'DD MMMM YYYY HH:mm:ss A'
              )}
            </div>
            <img
              src={selectedHashflag.asset_url}
              alt={selectedHashflag.hashName}
              className="mx-auto h-[72px] w-[72px]"
            />

            <div className="flex flex-wrap justify-center gap-2">
              {selectedHashflag.hashtags.map((hashtag) => (
                <a
                  className="text-sky-500 outline-none hover:text-sky-300"
                  key={hashtag}
                  href={`https://twitter.com/hashtag/${hashtag}`}
                >
                  #{hashtag}
                </a>
              ))}
            </div>
          </div>

          {/*
        You can render additional buttons to dismiss your dialog by setting
        `isOpen` to `false`.
      */}
          {/* <button onClick={() => setIsOpen(false)}>Cancel</button> */}
          {/* <button onClick={handleDeactivate}>Deactivate</button> */}
        </Dialog>
      )}
    </>
  )
}

export default Home
